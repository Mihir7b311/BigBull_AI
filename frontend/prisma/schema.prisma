// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?  @unique
  name      String?
  agents    Agent[]
}

model Agent {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  status        AgentStatus    @default(UNFUNDED)
  balance       Float          @default(0)
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  strategy      Strategy?
  performance   Performance?
  trades        Trade[]
  tradingCalls  TradingCall[]
  portfolioSnapshots PortfolioSnapshot[]
}

enum AgentStatus {
  UNFUNDED
  CONFIGURING
  ACTIVE
  PAUSED
}

model Strategy {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  type         String      // DCA, GRID, MOMENTUM
  riskLevel    RiskLevel
  maxTradeSize Float
  agentId      String      @unique
  agent        Agent       @relation(fields: [agentId], references: [id])
  parameters   Json?       // Flexible storage for strategy-specific parameters
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

model Performance {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  totalProfit     Float    @default(0)
  roi             Float    @default(0)
  tradesWon       Int      @default(0)
  tradesLost      Int      @default(0)
  cagrTarget      Float    @default(0)
  cagrActual      Float    @default(0)
  accuracy        Float    @default(0)
  sharpeRatio     Float    @default(0)
  maxDrawdown     Float    @default(0)
  winRate         Float    @default(0)
  agentId         String   @unique
  agent           Agent    @relation(fields: [agentId], references: [id])
}

model Trade {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  type        TradeType
  symbol      String
  amount      Float
  price       Float
  fee         Float
  status      TradeStatus
  profit      Float?
  agentId     String
  agent       Agent       @relation(fields: [agentId], references: [id])
  callId      String?
  tradingCall TradingCall? @relation(fields: [callId], references: [id])
}

enum TradeType {
  BUY
  SELL
}

enum TradeStatus {
  PENDING
  EXECUTED
  FAILED
  CANCELLED
}

model TradingCall {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  type        TradeType
  symbol      String
  price       Float
  reason      String
  confidence  Float
  status      CallStatus
  agentId     String
  agent       Agent       @relation(fields: [agentId], references: [id])
  trades      Trade[]
}

enum CallStatus {
  PENDING
  EXECUTED
  REJECTED
  EXPIRED
}

model PortfolioSnapshot {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  totalValue      Float
  investedValue   Float
  profit          Float
  holdings        Json     // Array of current holdings
  agentId         String
  agent           Agent    @relation(fields: [agentId], references: [id])
}
